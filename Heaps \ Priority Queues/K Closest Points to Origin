Q) LEETCODE 973 ---> K Closest Points to Origin

//Method - 1

class Solution {
    public int[][] kClosest(int[][] points, int k) { 
        
        //Method -1: Sort them using comparators
        
        int[][] ans = new int[k][2];
         Arrays.sort(points,(a,b)->{
         //just compare distances and sort them according it
                long pt1 = a[0] * a[0] + a[1] * a[1];
                long pt2 = b[0] * b[0] + b[1] * b[1];

                if(pt1 < pt2){
                        return -1;
                }
                else{
                        return 1;
                }
        });

        for(int i = 0; i < k; i++){
                ans[i] = points[i];
        }

        return ans;
    }
}


//Method - 2 : Using maxheap


        int[][] ans = new int[k][2];
        if (points.length == 0) return ans;
        PriorityQueue<Pair<Integer, int[]>> pq = new PriorityQueue<>((a, b) -> b.getKey() - a.getKey()); // maxHeap
        for (int[] point : points) {
            int dist = point[0] * point[0] + point[1] * point[1];
            if (pq.size() < k) {
                pq.offer(new Pair<>(dist, new int[]{point[0], point[1]}));
            } else {
                if (dist < pq.peek().getKey()) {
                    pq.poll();
                    pq.offer(new Pair<>(dist, new int[]{point[0], point[1]}));
                }
            }
        }
        int i = 0;
        while (!pq.isEmpty()) {
            ans[i][0] = pq.peek().getValue()[0];
            ans[i][1] = pq.peek().getValue()[1];
            pq.poll();
            i++;
        }
        return ans;

