Q.) 703 ---> Kth Largest Element in a Stream




Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Implement KthLargest class:

KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.
 

Example 1:

Input

["KthLargest", "add", "add", "add", "add", "add"]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]

Output
[null, 4, 5, 5, 8, 8]




//CODE


class KthLargest {

    PriorityQueue<Integer> minHeap;
    int size ;

//Method -1
    public KthLargest(int k, int[] nums) {
        size = k;
        minHeap = new PriorityQueue<>(k);
        for(int num : nums){

            minHeap.offer(num);
            if(minHeap.size() > size){
                minHeap.poll();
            }

            add(num);
        }
    }
    
    public int add(int val) {
        minHeap.offer(val);
        if(minHeap.size() > size){
            minHeap.poll();
        }

        return minHeap.peek();
    }
}

//Method - 2
 public KthLargest(int k, int[] nums) {

        size = k;
        minHeap = new PriorityQueue<>(k);
        for(int num : nums)
            add(num);
        }

    }
    
    public int add(int val) {
        minHeap.offer(val);
        if(minHeap.size() > size){
            minHeap.poll();
        }

        return minHeap.peek();
    }
}
