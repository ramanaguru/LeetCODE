Leetcode qn.no : 103(MEDIUM)


//PROBLEM DESCRIPTION

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. 
(i.e., from left to right, then right to left for the next level and alternate between).



Example 1:

        
         3
         
      9       20  
      
           15    7


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []



//CODE

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {


         List<List<Integer>> ans = new ArrayList<List<Integer>>();

         if (root == null)
            return ans;

        Queue <TreeNode> q = new LinkedList<>();
        q.add(root);
        int level = 0;


        while(!q.isEmpty()){
            int n = q.size();
             List<Integer> temp = new ArrayList<Integer>();

            for(int i = 1 ; i <= n; i++){
                TreeNode k = q.peek();
                q.remove();
                if(k.left != null){
                    q.add(k.left);
                }
                if(k.right != null){
                    q.add(k.right);
                }

                temp.add(k.val);
            }

            if(level % 2 == 1){
                Collections.reverse(temp);
            }
            level++;
            ans.add(temp);


        }


        return ans;



    }
}
