Problem Description : 

Given a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

---------------------------------------------------------------------

Example Input
Input 1:

    3
   / \
  9  20
    /  \
   15   7
Input 2:

   1
  / \
 6   2
    /
   3
---------------------------------------------------------------------

Example Output
Output 1:

 [
   [3],
   [9, 20],
   [15, 7]
 ]
Output 2:

 [ 
   [1]
   [6, 2]
   [3]
 ]


---------------------------------------------------------------------

CODE


/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */

public class Solution {
    public ArrayList<ArrayList<Integer>> solve(TreeNode A) {
       ArrayList<TreeNode> queue = new ArrayList<TreeNode>();
       queue.add(A);
       queue.add(null);

       ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
       ArrayList<Integer>temp = new ArrayList<>();

       while(queue.size() > 1){

           if(queue.get(0) != null){
                temp.add(queue.get(0).val);

                if(queue.get(0).left != null){
                   queue.add(queue.get(0).left);
                }
                if(queue.get(0).right != null){
                   queue.add(queue.get(0).right);
                }

                queue.remove(0);           
           }

           else{
               res.add(temp);
               temp = new ArrayList <Integer >();
               queue.remove(0);
               queue.add(null);
           }

       }

       res.add(temp);


       return res;

        
    }
}
