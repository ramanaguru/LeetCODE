Problem Description
Given preorder and inorder traversal of a tree, construct the binary tree.

NOTE: You may assume that duplicates do not exist in the tree.


-------------------------------------------------------------------------------------
A[] ---> Preorder
B[] ---> Inorder


Example Input
Input 1:

 A = [1, 2, 3]
 B = [2, 1, 3]
Input 2:

 A = [1, 6, 2, 3]
 B = [6, 1, 3, 2]


Example Output
Output 1:

   1
  / \
 2   3
Output 2:

   1  
  / \
 6   2
    /
   3
   
-------------------------------------------------------------------------------------

CODE


/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {

    HashMap <Integer,Integer> hm = new HashMap<Integer,Integer>();

    public TreeNode buildTree(int[] A, int[] B) {

        int Ps = 0;
        int Pe = A.length - 1;
        int is = 0;
        int ie = B.length - 1; 

       for(int i = 0; i < B.length; i++){
           hm.put(B[i],i);
       }


        return createTree(A,B,Ps,Pe,is,ie);
    }


    public TreeNode createTree(int A[], int B[], int Ps, int Pe, int is,int ie){
        if(Ps > Pe || is > ie){
            return null;
        }

        TreeNode root = new TreeNode (A[Ps]); // this is will our root for next next coming
        int indexRoot = hm.get(A[Ps]); // get the index of the root in our hashmap(In HASHMAP we are storing the index of inorder)

        int first_X_elements = indexRoot - is; 

        root.left = createTree(A, B ,Ps + 1, Ps + first_X_elements, is, indexRoot - 1);
        root.right = createTree(A, B, Ps + first_X_elements + 1, Pe, indexRoot + 1 , ie);

        return root;
    }
}
