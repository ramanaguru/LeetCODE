Given a sorted array A of size N and a target value B, return the index (0-based indexing) if the target is found.
If not, return the index where it would be if it were inserted in order.

NOTE: You may assume no duplicates in the array. Users are expected to solve this in O(log(N)) time.


Example Input
Input 1:

A = [1, 3, 5, 6]
B = 5 
Input 2:

A = [1]
B = 1


Example Output
Output 1:

2 
Output 2:

0


 // CODE

public class Solution {
    public int searchInsert(int[] A, int B) {
        int n = A.length;
        int low = 0;
        int high = n - 1;
       

        while(low <= high){
            int mid = (low + high)/2;

            if(A[mid] == B){
                return mid;
            }
            if(A[mid] > B){
                high = mid - 1;
            }
            else{
            low = mid + 1;    
            }
            
        }

        return low;


        


    }
}
