Given an integer A.

Compute and return the square root of A.

If A is not a perfect square, return floor(sqrt(A)).

DO NOT USE SQRT FUNCTION FROM THE STANDARD LIBRARY.

NOTE: Do not use the sqrt function from the standard library. Users are expected to solve this in O(log(A)) time.




Example Input
Input 1:

 11
Input 2:

 9


Example Output
Output 1:

 3
Output 2:

 3


Example Explanation
Explanation:

 When A = 11 , square root of A = 3.316. It is not a perfect square so we return the floor which is 3.
 When A = 9 which is a perfect square of 3, so we return 3
 
 
 
 //CODE --> solved in Binary search with  simple 2 methods
 
 
 public class Solution {
    public int sqrt(int A) {
    
        METHOD - 1

        int ans = 0;
        int low = 1;
        int high = A;

        while(low <= high){
            long mid = low+(high-low)/2 ;

            if(mid * mid == A){
                return (int)mid;
            }

            if(mid * mid > A){
                high = (int)mid - 1; // go left
            }

            if(mid * mid <= A){
                ans = (int)mid;
                low = (int)mid + 1; // go right
            }
        }

        return ans;

        

        //METHOD - 2

        long ans = 0;
        long low = 1;
        long high = A;

        while(low <= high){
            long mid = low + (high - low )/2;

            if(mid * mid == A){
                return (int)mid;
            }
            
            if(mid * mid > A){
                high = mid - 1;
            }

            if(mid * mid <= A){
                ans = mid;
                low = mid + 1;
            }
        }

        return (int)ans;
        
    }
}

 
 
