Problem Description

Given an array of integers A of size N and an integer B.

The College library has N books. The ith book has A[i] number of pages.

You have to allocate books to B number of students so that the maximum number of pages allocated to a student is minimum.

A book will be allocated to exactly one student.
Each student has to be allocated at least one book.
Allotment should be in contiguous order, for example: A student cannot be allocated book 1 and book 3, skipping book 2.
Calculate and return that minimum possible number.

NOTE: Return -1 if a valid assignment is not possible.


Input Format
The first argument given is the integer array A.
The second argument given is the integer B.

Output Format
Return that minimum possible number.


Example Input
A = [12, 34, 67, 90]
B = 2


Example Output
113

//OUTPUT EXPLAINATION

There are two students. Books can be distributed in following fashion : 

1)  [12] and [34, 67, 90]
    Max number of pages is allocated to student 2 with 34 + 67 + 90 = 191 pages
2)  [12, 34] and [67, 90]
    Max number of pages is allocated to student 2 with 67 + 90 = 157 pages 
3)  [12, 34, 67] and [90]
    Max number of pages is allocated to student 1 with 12 + 34 + 67 = 113 pages
    Of the 3 cases, Option 3 has the minimum pages = 113.
    
    
    
    //CODE
    
    import java.util.ArrayList;
import java.io.*;
public class Solution {
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
        //n --> no.of books(arr.size())    m  --> no.of students
        int low  = 0; // or low  = arr.get(0); or low = Integer,MAX_VALUE
        int high = 0;
 
      //Base cases  : Think of it what could it might fail? 
        //Each Student  must get atleast one book
        //So, we came up  --> What If , No.of student is greater than No.of book , ie.(m > n) it fails
        
        if(m > arr.size()){
            return -1;
        }
           
        //define the search Space
        for(int i = 0; i  < n;  i++){
            low = Math.max(low, arr.get(i));
            high += arr.get(i);
        }

        int ans = -1;

        while(low <= high){
            
            int mid = (low + high) / 2; 
            
            if(check(arr, n, m, mid)){
                ans = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }

        return ans;
            
    } 
    public static boolean check(ArrayList<Integer> arr, int n, int m, int mid) {
       int studentCount = 1;
       int pages = arr.get(0);
       
       for(int i = 1 ; i < n; i++){
           pages += arr.get(i);
           if(pages > mid){
               studentCount++;
               pages = arr.get(i);
               if(studentCount > m){
                   return false;
               }
           }
       }
       return true;
   }
  
}
    
 

