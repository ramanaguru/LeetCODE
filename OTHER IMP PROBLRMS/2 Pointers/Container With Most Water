Problem Description

Given n non-negative integers A[0], A[1], ..., A[n-1] , where each represents a point at coordinate (i, A[i]).

N vertical lines are drawn such that the two endpoints of line i is at (i, A[i]) and (i, 0).

Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container.


Input Format
Single Argument representing a 1-D array A.



Output Format
Return single Integer denoting the maximum area you can obtain...



Example Input
Input 1:

A = [1, 5, 4, 3]
Input 2:

A = [1]


Example Output
Output 1:

 6
Output 2:

 0
 
 
 CODE
 
 
 public class Solution {
    public int maxArea(int[] A) {
        //Initalising Variables
        int n  = A.length;
        int p1 = 0;
        int p2 = n - 1;
        int ans = 0 ;

        if(n == 1) return 0; // Edge Case 

        while(p1 < p2 && p2 < n){
            int height = Math.min(A[p1], A[p2]); // water can hold at min , if it is maxi water will split out of container
            int width = p2 - p1; //difference b/w the index will be width

            //General formula of Area = height * width
            int area = height * width;

            //finding MAXI area that can obtain
            ans = Math.max(ans,area);

               /*From observation ,
            · we came to know  Skiping min height , because we cannot get better ans for that.
            · we are moving pointer with minValue because we cannot get better ans for that.
            */
           

            if(height == A[p1]) p1++;
            else{
                p2--;
            }


        }
        return ans;




    }
}

 
