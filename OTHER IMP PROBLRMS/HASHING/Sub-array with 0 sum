//Problem Description

Given an array of integers A, find and return whether the given array contains a non-empty subarray with a sum equal to 0.

If the given array contains a sub-array with sum zero return 1, else return 0.


//Input Format
The only argument given is the integer array A.


//Output Format
Return whether the given array contains a subarray with a sum equal to 0.


//Example Input

//Input 1:

 A = [1, 2, 3, 4, 5]
 
//Input 2:

 A = [-1, 1]


//Example Output

//Output 1:

 0
 
//Output 2:

 1


//Example Explanation

//Explanation 1:

 No subarray has sum 0.
 
//Explanation 2:

 The array has sum 0.


//CODE


public class Solution {
    public int solve(int[] A) {
    //Method - 1 : USING HASHSET

       int n = A.length;
       long sum = 0L; 
       
        HashSet<Long>hs = new HashSet<>();
        hs.add(0L);
        for(int i  = 0; i < n; i++){
            sum += A[i];
           if(hs.contains(sum)){
               return 1;
           }else{
               hs.add(sum);
           }
        }
        return 0;

//------------------------------------------------------------------------------------------

    //Method - 2 : USING HASHMAP
        
    //     //Creating prefixSum Array
    //     long pf[] = new long[A.length];
    //     pf[0] = A[0];
    //     for(int i = 1; i < A.length; i++){
    //         pf[i] = pf[i-1] + A[i];
    //         if(pf[i] == 0) return 1;
    //     }

    //     //creating HashMap if zero or any element is repeating in the pf array return 1  

    //     HashMap<Long,Long>hm = new HashMap<>();
        
    //     for(int i = 0; i < A.length; i++){
    //        if(hm.containsKey(pf[i])){
    //            return 1;
    //        }
    //        else{
    //            hm.put(pf[i], 1L);
    //        }
    //     }

    //     return 0;

    }
}
