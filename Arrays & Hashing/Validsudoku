//Problem Description

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:

Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. 
Since there are two 8's in the top left 3x3 sub-box, it is invalid.



//Code

class Solution {
    public boolean isValidSudoku(char[][] board) {
        int n = board.length;
        int m = board[0].length;

        //Row check
        for(int i = 0; i < n; i++){
            HashSet<Character>rowset = new HashSet<>();

            for(int j = 0; j < m; j++){

                if(board[i][j] == '.'){
                    continue;
                }
                if(rowset.contains(board[i][j])){
                    return false;
                }

                rowset.add(board[i][j]);

            }
        }

          //check for cols
        for (int i = 0; i < m; i++) {
            HashSet<Character>colset = new HashSet<>();
            for (int j = 0; j < n; j++) {
                if (board[j][i] == '.') {
                    continue;
                }
                if (colset.contains(board[j][i])) {
                    return false;
                }

                colset.add(board[j][i]);
            }
        }

        //grid (3 * 3) check
        
        for(int i = 0; i < n; i+=3){            
            for(int j = 0; j < m; j+=3){
                if(!checkgrid(i,j,board)){
                    return false;
                }
            }
        }
        return true;  

    }


    public boolean checkgrid(int idxI , int idxJ , char[][] board){

        int rows = idxI + 3;
        int cols = idxJ + 3;

        HashSet<Character>gridset = new HashSet<>();


        for(int i = idxI; i < rows; i++){    
            for(int j = idxJ; j < cols; j++){
                if(board[i][j] == '.'){
                    continue;
                }
                if(gridset.contains(board[i][j])){
                    return false;
                }

                gridset.add(board[i][j]);

            }
        }

        return true;
    }


}

