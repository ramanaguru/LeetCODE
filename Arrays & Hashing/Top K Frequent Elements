
//Problem description


Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]




class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        //BUCKET ALGO

        List<Integer>[]bucket = new List[nums.length+1];

        HashMap<Integer,Integer>hm = new HashMap<>();

        for(int num : nums){

            // if(hm.containsKey(num)){
            //     hm.get((num)+1);
            // }
            // else{
            //     hm.put(num,1);
            // }

            hm.put(num,hm.getOrDefault(num, 0)+1);
        }

        //keySet() method in Java is used to create a set out of the key elements contained in the hash map.
        
        for(int i : hm.keySet()){   
            int freq = hm.get(i);

            if(bucket[freq] == null){
                bucket[freq] = new ArrayList<>();
            }
            
            bucket[freq].add(i);
        }

        int ans[] = new int[k];
        int index = 0;

        for(int pos =bucket.length -1 ; pos >= 0 && index <k; pos--){
            if(bucket[pos] != null){
                for(Integer  integer : bucket[pos]){
                    ans[index++] = integer;
                }
            }
        }


        return ans;
    }
}
